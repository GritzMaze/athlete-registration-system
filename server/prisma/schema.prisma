generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ATHLETE
  COACH
  MANAGER
  ADMIN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Users {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String
  email         String?         @unique
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")
  role          Role            @default(ATHLETE)
  firstName     String?
  lastName      String?
  Events        Events[]
  Registrations Registrations[]
  Documents     Documents[]
}

model Events {
  id               Int             @id @default(autoincrement())
  name             String
  date             DateTime
  location         String
  image            String?
  managerId        Int
  manager          Users           @relation(fields: [managerId], references: [id])
  participationFee Int
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  Registrations    Registrations[]
}

model Registrations {
  id                     Int               @id @default(autoincrement())
  email                  String
  name                   String
  birthDate              DateTime
  gender                 String
  country                String
  events                 String[]
  club                   String?
  federation             String
  eventId                Int
  userId                 Int
  event                  Events            @relation(fields: [eventId], references: [id])
  user                   Users             @relation(fields: [userId], references: [id])
  ParticipationFeeStatus TransactionStatus @default(PENDING) @map("participation_fee_status")
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @default(now()) @map("updated_at")
}

model Documents {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         Users    @relation(fields: [userId], references: [id])
  name         String
  url          String
  documentType String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
}
